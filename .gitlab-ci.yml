include:
  - component: gitlab.gnome.org/GNOME/citemplates/release-service@master
    inputs:
      dist-job-name: "sdist"
      tarball-artifact-path: "${TARBALL_ARTIFACT_PATH}"

stages:
  - pre_build
  - pre_commit
  - build_and_test
  - coverage
  - deploy

variables:
  REGISTRY: registry.gitlab.gnome.org/gnome/pygobject
  TARBALL_ARTIFACT_PATH: "dist/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"

build-image:
  stage: pre_build
  interruptible: true
  image: quay.io/buildah/stable:latest
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_ISOLATION: chroot

#   rules:
#     - changes:
#       - ".gitlab-ci/Dockerfile"
#       - ".gitlab-ci/set_env.sh"
  script:
    - echo "$CI_REGISTRY_PASSWORD" | buildah login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    # Hopefully save ourselves some work by pulling the latest main and branch images
    # - buildah pull $REGISTRY/$CI_DEFAULT_BRANCH || true
    # - test -n "$CI_COMMIT_BRANCH" && buildah pull $REGISTRY/$CI_COMMIT_BRANCH || true
    # Create a new image
    - buildah build -t $REGISTRY/ci:$CI_PIPELINE_ID --layers --cache-from=$CACHE --cache-to=$CACHE -f Dockerfile .gitlab-ci
    # Publish for later use in the pipeline
    - buildah push $REGISTRY/ci:$CI_PIPELINE_ID
    - >
      test -n "$CI_COMMIT_BRANCH" &&
      buildah push $REGISTRY/ci:$CI_PIPELINE_ID docker://$REGISTRY/$CI_COMMIT_BRANCH || true

default:
  image: $REGISTRY/ci:$CI_PIPELINE_ID
  cache:
    paths:
      - _ccache/

pre-commit:
  stage: pre_commit
  variables:
    PYTHON_VERSION: "3.13"
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
  script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - python -m pip install -q pre-commit
    - python -m pre_commit run --all-files
  artifacts:
    when: on_failure
    paths:
      - .cache/pre-commit/pre-commit.log

linux:
  stage: build_and_test
  parallel:
    matrix:
      - PYTHON_VERSION:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "pypy3"
        TEST_GTK_VERSION: "3.0"
      - PYTHON_VERSION: "3.11"
        TEST_GTK_VERSION: "4.0"
  artifacts:
    when: always
    paths:
      - coverage/
      - test-results.xml
    reports:
      junit: test-results.xml
  script:
   - bash -x ./.gitlab-ci/test-docker.sh

windows:
  stage: build_and_test
  tags:
    - win32-ps
  parallel:
    matrix:
      - MSYSTEM:
          - "MINGW32"
          - "MINGW64"
  artifacts:
    when: always
    paths:
      - coverage/
      - _build/meson-logs
      - test-results.xml
    reports:
      junit: test-results.xml
  script:
    - $env:CHERE_INVOKING = 'yes'
    - C:\msys64\usr\bin\pacman --noconfirm -Syyuu
    - C:\msys64\usr\bin\bash -lc "bash -x ./.gitlab-ci/test-msys2.sh"

coverage:
  stage: coverage
  artifacts:
    paths:
      - coverage/
  variables:
    PYTHON_VERSION: "3.9"
  script:
    - bash -x ./.gitlab-ci/coverage-docker.sh
  coverage: '/^\s+lines\.+:\s+([\d.]+\%)\s+/'

pages:
  stage: deploy
  dependencies:
    - coverage
  before_script:
    - python -m pip install "pdm!=2.17.3"
    - python -m pdm install -v
  script:
    - python -m pdm run sphinx-build -T -E -W --keep-going -b html -d _build/doctrees -D language=en docs/ public
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

sdist:
  stage: build_and_test
  artifacts:
    paths:
      - dist/
  script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - bash -x ./.gitlab-ci/build-sdists.sh

gnome-master:
  stage: build_and_test
  image: quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master
  tags:
    - flatpak
  parallel:
    matrix:
      - TEST_GTK_VERSION:
          - "3.0"
          - "4.0"
  artifacts:
    paths:
      - coverage/
  script:
    - bash -x ./.gitlab-ci/test-flatpak.sh

python3.12-pdm:
  stage: build_and_test
  variables:
    PYTHON_VERSION: "3.12"
    TEST_GTK_VERSION: "3.0"
  before_script:
    - python -m pip install "pdm!=2.17.3"
    - python -m pdm install -v
  script:
    - xvfb-run -a python -m pdm run pytest

minimal-meson:
  allow_failure: true
  stage: build_and_test
  image: quay.io/fedora/fedora:40
  before_script:
    - dnf install --assumeyes gcc meson git flex bison diffutils python3-devel python3-pytest gobject-introspection-devel
  script:
    - meson setup _build
    - meson compile -C _build
    - PYTEST_ADDOPTS="-sv -k 'not test_cairo'" meson test -C _build --suite pygobject --verbose
